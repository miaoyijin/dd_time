AOP理解一：
面向切面编程（AOP是Aspect Oriented Program的首字母缩写） ，我们知道，面向对象的特点是继承、多态和封装。而封装就要求将功能分散到不同的对象中去，这在软件设计中往往称为职责分配。实际上也就是说，让不同的类设计不同的方法。这样代码就分散到一个个的类中去了。这样做的好处是降低了代码的复杂程度，使类可重用。      但是人们也发现，在分散代码的同时，也增加了代码的重复性。什么意思呢？比如说，我们在两个类中，可能都需要在每个方法中做日志。按面向对象的设计方法，我们就必须在两个类的方法中都加入日志的内容。也许他们是完全相同的，但就是因为面向对象的设计让类与类之间无法联系，而不能将这些重复的代码统一起来。    也许有人会说，那好办啊，我们可以将这段代码写在一个独立的类独立的方法里，然后再在这两个类中调用。但是，这样一来，这两个类跟我们上面提到的独立的类就有耦合了，它的改变会影响这两个类。那么，有没有什么办法，能让我们在需要的时候，随意地加入代码呢？这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。     
【一般而言，我们管切入到指定类指定方法的代码片段称为切面，而切入到哪些类、哪些方法则叫切入点】。
有了AOP，我们就可以把几个类共有的代码，抽取到一个切片中，等到需要时再切入对象中去，从而改变其原有的行为。这样看来，AOP其实只是OOP的补充而已。OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。有了AOP，OOP变得立体了。如果加上时间维度，AOP使OOP由原来的二维变为三维了，由平面变成立体了。从技术上来说，AOP基本上是通过代理机制实现的。      AOP在编程历史上可以说是里程碑式的，对OOP编程是一种十分有益的补充


二：AOP 在理解
什么时候要用到面向切面AOP呢？举个例子，【你想给你的网站加上鉴权，对某些url】，你认为不需要鉴权就可以访问，对于某些url，你认为需要有特定权限的用户才能访问如果你依然使用OOP，面向对象，那你只能在那些url对应的Controller代码里面，一个一个写上鉴权的代码而如果你使用了AOP呢？那就像使用Spring Security进行安全管理一样简单（更新：Spring Security的拦截是基于Servlet的Filter的，不是aop，不过两者在使用方式上类似）：protected void configure(HttpSecurity http) throws Exception {
      http
        .authorizeRequests()
           .antMatchers("/static","/register").permitAll()
           .antMatchers("/user/**").hasRoles("USER", "ADMIN") 这样的做法，对原有代码毫无入侵性，这就是AOP的好处了，把和主业务无关的事情，放到代码外面去做。所以当你下次发现某一行代码经常在你的Controller里出现，比如方法入口日志打印，那就要考虑使用AOP来精简你的代码了。聊完了AOP是啥，【现在再来聊聊实现原理。AOP像OOP一样，只是一种编程范式，AOP并没有规定说，实现AOP协议的代码，要用什么方式去实现。比如上面的鉴权的例子，假设我要给UserController的saveUser()方法加入鉴权，第一种方式，我可以采用代理模式】，什么是代理模式，就是我再生成一个代理类，去代理UserController的saveUser()方法，代码大概就长这样：class UserControllerProxy {
    private UserController userController;

    public void saveUser() {
        checkAuth();
        userController.saveUser();
    }
}这样在实际调用saveUser()时，我调用的是代理对象的saveUser()方法，从而实现了鉴权。【代理分为静态代理和动态代理，静态代理，顾名思义，就是你自己写代理对象，动态代理，则是在运行期，生成一个代理对象。Spring AOP就是基于动态代理的】，如果要代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy，去创建代理对象，而对于没有实现接口的对象，就无法使用JDK Proxy去进行代理了（为啥？你写一个JDK Proxy的demo就知道了），这时候Spring AOP会使用Cglib，生成一个被代理对象的子类，来作为代理，放一张图出来就明白了：<img src="https://pic2.zhimg.com/50/v2-e777957e808c92fefcbcbec3945a2f91_hd.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="1024" data-rawheight="504" class="origin_image zh-lightbox-thumb" width="1024" data-original="https://pic4.zhimg.com/v2-e777957e808c92fefcbcbec3945a2f91_r.jpg?source=1940ef5c"/>好，上面讲的是AOP的第一种实现，运行时织入。但是不是所有AOP的实现都是在运行时进行织入的，因为这样效率太低了，而且只能针对方法进行AOP，无法针对构造函数、字段进行AOP。我完全可以在编译成class时就织入啊，比如AspectJ，当然AspectJ还提供了后编译器织入和类加载期织入，这里我就不展开讨论了，我只是来澄清一下大家对AOP的误解，有兴趣继续学习的，可以看一下这篇博客：
